// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// optim_geomm
Rcpp::List optim_geomm(Eigen::VectorXd& beta0, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X, const Eigen::VectorXd& offset);
RcppExport SEXP _cams_optim_geomm(SEXP beta0SEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_geomm(beta0, Y, X, offset));
    return rcpp_result_gen;
END_RCPP
}
// optim_geommc
Rcpp::List optim_geommc(Eigen::VectorXd& beta0, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X, const Eigen::VectorXd& K, const Eigen::VectorXd& offset);
RcppExport SEXP _cams_optim_geommc(SEXP beta0SEXP, SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_geommc(beta0, Y, X, K, offset));
    return rcpp_result_gen;
END_RCPP
}
// lgeo_cpp
double lgeo_cpp(Eigen::VectorXd& Y, Eigen::VectorXd& Theta, bool logl);
RcppExport SEXP _cams_lgeo_cpp(SEXP YSEXP, SEXP ThetaSEXP, SEXP loglSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< bool >::type logl(loglSEXP);
    rcpp_result_gen = Rcpp::wrap(lgeo_cpp(Y, Theta, logl));
    return rcpp_result_gen;
END_RCPP
}
// dd_lgeo_cpp
List dd_lgeo_cpp(Eigen::VectorXd& Y, Eigen::VectorXd& Theta);
RcppExport SEXP _cams_dd_lgeo_cpp(SEXP YSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_lgeo_cpp(Y, Theta));
    return rcpp_result_gen;
END_RCPP
}
// dd_lgeom_cpp
List dd_lgeom_cpp(const Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, Eigen::VectorXd& offset, bool calc_hess);
RcppExport SEXP _cams_dd_lgeom_cpp(SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetSEXP, SEXP calc_hessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_hess(calc_hessSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_lgeom_cpp(beta, Y, X, offset, calc_hess));
    return rcpp_result_gen;
END_RCPP
}
// dd_lgeomc_cpp
List dd_lgeomc_cpp(const Eigen::VectorXd& beta, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X, const Eigen::VectorXd& offset, const Eigen::VectorXd& K, bool calc_hess);
RcppExport SEXP _cams_dd_lgeomc_cpp(SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetSEXP, SEXP KSEXP, SEXP calc_hessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_hess(calc_hessSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_lgeomc_cpp(beta, Y, X, offset, K, calc_hess));
    return rcpp_result_gen;
END_RCPP
}
// lgeo_const_cpp
double lgeo_const_cpp(Eigen::VectorXd& Y, Eigen::VectorXd& Theta, Eigen::VectorXd& K, bool logl);
RcppExport SEXP _cams_lgeo_const_cpp(SEXP YSEXP, SEXP ThetaSEXP, SEXP KSEXP, SEXP loglSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type logl(loglSEXP);
    rcpp_result_gen = Rcpp::wrap(lgeo_const_cpp(Y, Theta, K, logl));
    return rcpp_result_gen;
END_RCPP
}
// ddlgeo_const_cpp
List ddlgeo_const_cpp(const Eigen::VectorXd& Y, const Eigen::VectorXd& Theta, const Eigen::VectorXd& K, bool calc_ddlog);
RcppExport SEXP _cams_ddlgeo_const_cpp(SEXP YSEXP, SEXP ThetaSEXP, SEXP KSEXP, SEXP calc_ddlogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_ddlog(calc_ddlogSEXP);
    rcpp_result_gen = Rcpp::wrap(ddlgeo_const_cpp(Y, Theta, K, calc_ddlog));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cams_optim_geomm", (DL_FUNC) &_cams_optim_geomm, 4},
    {"_cams_optim_geommc", (DL_FUNC) &_cams_optim_geommc, 5},
    {"_cams_lgeo_cpp", (DL_FUNC) &_cams_lgeo_cpp, 3},
    {"_cams_dd_lgeo_cpp", (DL_FUNC) &_cams_dd_lgeo_cpp, 2},
    {"_cams_dd_lgeom_cpp", (DL_FUNC) &_cams_dd_lgeom_cpp, 5},
    {"_cams_dd_lgeomc_cpp", (DL_FUNC) &_cams_dd_lgeomc_cpp, 6},
    {"_cams_lgeo_const_cpp", (DL_FUNC) &_cams_lgeo_const_cpp, 4},
    {"_cams_ddlgeo_const_cpp", (DL_FUNC) &_cams_ddlgeo_const_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_cams(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
